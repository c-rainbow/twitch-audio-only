/******/ (() => { // webpackBootstrap
/******/ 	"use strict";

;// CONCATENATED MODULE: ./src/url.ts
const twitchDomain = "twitch.tv/";
// Non-exhuastive list of non-channel routes in twitch.tv
const nonChannels = (/* unused pure expression or super */ null && ([
    "", "directory", "videos", "u", "settings", "friends", "subscriptions", "inventory", "wallet"
]));
const apiDomain = "api.twitch.tv/api/channels/";
const accessToken = "/access_token";
const usherDomain = "usher.ttvnw.net/api/channel/hls/";
const usherExt = ".m3u8";
// Extract audio_only stream .m3u8 from the master playlist content.
// Returns the first occurance of a URL after audio_only metadata.
// TODO: This works, but eventually we will need to fully parse the content
// and get audio_only stream url
function parseAudioOnlyUrl(content) {
    if (!content) {
        return null;
    }
    const lines = content.split('\n');
    let audioOnlyFound = false;
    for (let line of lines) {
        if (line.includes("audio_only"))
            audioOnlyFound = true;
        if (audioOnlyFound && line.startsWith("https://"))
            return line;
    }
    return null;
}
function getChannelFromWebUrl() {
    const url = new URL(location.href);
    const splited = url.pathname.split("/");
    const filtered = splited.filter(elem => elem.length > 0);
    console.debug(`Filtered: ${filtered}, url: ${url.href}`);
    if (filtered.length != 1) {
        return null;
    }
    const channel = filtered[0];
    // Filter out some non-channel pages with similar URL pattern as channel pages
    if (nonChannels.indexOf(channel) != -1) {
        return null;
    }
    return channel;
}
function getChannelFromTokenUrl(accessTokenUrl) {
    const channel = getNameBetweenStrings(accessTokenUrl, apiDomain, accessToken);
    console.log("channel name parsed access token: " + channel);
    return channel;
}
function getChannelFromUsherUrl(usherUrl) {
    const channel = getNameBetweenStrings(usherUrl, usherDomain, usherExt);
    console.log("channel name parsed usher: " + channel);
    return channel;
}
// Get channel between the first occurance of startStr and the first endStr after startStr.
function getNameBetweenStrings(url, startStr, endStr, endOptional = false) {
    let startIndex = url.indexOf(startStr);
    if (startIndex === -1) {
        return null;
    }
    startIndex += startStr.length;
    let endIndex = url.indexOf(endStr, startIndex + 1);
    if (endIndex === -1) {
        if (endOptional)
            endIndex = url.length;
        else
            return null;
    }
    return url.substring(startIndex, endIndex);
}
// TODO: Instead of pre-defined url format, use recently used ont in Twitch web
function buildUsherUrl(channel, token, sig) {
    const usherUrl = new UsherUrl(`https://usher.ttvnw.net/api/channel/hls/${channel}.m3u8`);
    usherUrl.update(token, sig);
    // It is not clear if all of these params are required or if there are any missing ones.
    usherUrl.setQueryString("player", "twitchweb");
    usherUrl.setQueryString("allow_source", "true");
    usherUrl.setQueryString("type", "any");
    return usherUrl;
}
// Class to store and manipulate usher URL.
class UsherUrl {
    constructor(url) {
        this.originalUrl = url;
        this.urlObject = new URL(url);
        this.channel = this.getChannel();
        this.expiresAt = this.getExpiresAt();
        this.setQueryString("allow_audio_only", "true");
    }
    getUnexpiredUrl() {
        const now = new Date();
        const secondsSinceEpoch = Math.round(now.getTime() / 1000);
        // 60 seconds buffer before token expiration
        if (secondsSinceEpoch + 60 < this.expiresAt) {
            return this.getUrl();
        }
        console.debug(`Cached URL for ${this.channel} is expired`);
        return null;
    }
    getUrl() {
        return this.urlObject.toString();
    }
    getPath(url) {
        const endIndex = url.indexOf("?");
        if (endIndex === -1) {
            return url;
        }
        return url.substring(0, endIndex);
    }
    getQueryString(key) {
        const value = this.urlObject.searchParams.get(key);
        return value;
    }
    setQueryString(name, value) {
        this.urlObject.searchParams.set(name, value);
    }
    getExpiresAt() {
        const tokenString = this.getQueryString("token");
        if (!tokenString) {
            return null;
        }
        try {
            const tokenJson = JSON.parse(tokenString);
            const expiresAt = tokenJson.expires;
            return expiresAt;
        }
        catch (err) {
            console.log(`Cannot parse token in usher URL. Error: ${err}`);
        }
        return null;
    }
    getChannel() {
        const channel = getChannelFromUsherUrl(this.originalUrl);
        return channel;
    }
    update(newToken, newSig) {
        this.setQueryString("token", newToken);
        this.setQueryString("sig", newSig);
        this.setQueryString("p", this.getRandomNumber().toString());
        this.expiresAt = this.getExpiresAt();
    }
    getRandomNumber() {
        return Math.floor(Math.random() * 1000000);
    }
}

;// CONCATENATED MODULE: ./src/background.ts

// Map of channel(string) to url(string)
var accessTokenUrlMap = new Map();
// Map of channel(string) to url(UsherUrl)
var usherUrlMap = new Map();
// Last requested usher URL by tab. Needed to detect main page or hosted channel
var lastRequstedChannelByTab = new Map();
function getUrlGroup(channel) {
    const group = { channel: channel, accessTokenUrl: null, usherUrl: null };
    // Get Access Token URL
    const tokenUrl = accessTokenUrlMap.get(channel);
    if (tokenUrl) {
        group.accessTokenUrl = tokenUrl;
    }
    else {
        console.debug("Access token URL is not found for channel " + channel);
    }
    // Get Usher URL
    const cachedUsherUrlObj = usherUrlMap.get(channel);
    if (cachedUsherUrlObj) {
        group.usherUrl = cachedUsherUrlObj.getUnexpiredUrl();
    }
    else {
        console.debug(`No cached usherUrl object for channel ${channel}`);
    }
    return group;
}
function handleGetUrlsMessage(channel, tabId) {
    var _a;
    const callbackObj = { webUrl: null, lastRequested: null };
    callbackObj.webUrl = getUrlGroup(channel);
    const lastRequstedChannel = (_a = lastRequstedChannelByTab.get(tabId)) !== null && _a !== void 0 ? _a : null;
    callbackObj.lastRequested = getUrlGroup(lastRequstedChannel);
    return callbackObj;
}
chrome.runtime.onMessage.addListener(function (request, sender, sendResponse) {
    if (request.message !== "get_audio_url") {
        console.debug("message is not get_audio_url");
        sendResponse(null);
        return;
    }
    if (!request.channel) {
        console.debug("Twitch channel name is not included in the request");
        sendResponse(null);
        return;
    }
    const responseObj = handleGetUrlsMessage(request.channel, sender.tab.id);
    sendResponse(responseObj);
});
chrome.webRequest.onBeforeRequest.addListener(function (details) {
    console.log("Token request: " + details.url);
    const channel = getChannelFromTokenUrl(details.url);
    if (channel) {
        accessTokenUrlMap.set(channel, details.url);
    }
}, { urls: ["*://api.twitch.tv/api/channels/*/access_token*"] });
chrome.webRequest.onBeforeRequest.addListener(function (details) {
    console.log("tabId: " + details.tabId);
    console.log("Usher request: " + details.url);
    const channel = getChannelFromUsherUrl(details.url);
    const usherUrlObj = new UsherUrl(details.url);
    usherUrlMap.set(channel, usherUrlObj);
    lastRequstedChannelByTab.set(details.tabId, channel);
}, { urls: ["*://usher.ttvnw.net/*"] });

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,